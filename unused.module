<?php
/**
 * @file
 * Provides a list of unused core modules on your site.
 */

/**
 * Implements hook_menu().
 */
function unused_menu() {
  return array(
    'admin/reports/unused' => array(
      'title' => 'Unused modules',
      'description' => 'Overview of unused core modules.',
      'page callback' => 'unused_page',
      'access arguments' => array('access site reports'),
      'type' => MENU_NORMAL_ITEM,
    ),
  );
}

/**
 * Page callback: Lists unused core modules.
 *
 * @return string
 *   An HTML-formatted string with the Unused page content.
 */
function unused_page() {
  $page = array(
    'help' => array(
      '#type' => 'help',
      '#markup' => t("This page lists modules that are considered 'unused' and can therefore be uninstalled. The 'Reason' column describes the criteria used to determine why a module is unused. Uninstall modules at your own risk, and always take a backup of your database and/or config first."),
    ),
  );

  $rows = array();
  $all_modules = system_rebuild_module_data();
  foreach (module_invoke_all('unused') as $module_name => $reason) {
    if ($reason) {
      $name = $all_modules[$module_name]->info['name'];
      $status = $all_modules[$module_name]->status ? t('Enabled') : t('Disabled');

      $rows[] = array($name, $reason, $status);
    }
  }

  $page['table'] = array(
    '#theme' => 'table',
    '#header' => array(t('Module'), t('Reason'), t('Status')),
    '#rows' => $rows,
    '#empty' => t('All modules are being used!'),
  );

  return $page;
}

/**
 * Implements hook_unused() on behalf of all core modules.
 */
function unused_unused() {
  $modules = array();

  // Administration Bar: Check for enabled components in config.
  if (empty(config_get('admin_bar.settings', 'components'))) {
    $modules['admin_bar'] = t('All <a href="@admin_bar">components</a> are disabled.', array(
      '@admin_bar' => url('admin/config/administration/admin-bar'),
    ));
  }

  // Block: Check for any custom blocks.
  if (empty(block_block_info())) {
    $modules['block'] = t('There are no <a href="@blocks">custom blocks</a>.', array(
      '@blocks' => url('admin/structure/block'),
    ));
  }

  // CKEditor: Check for any text formats that use CKEditor.
  $enabled = FALSE;
  foreach (filter_formats() as $format) {
    if ($format->editor == 'ckeditor') {
      $enabled = TRUE;
      break;
    }
  }
  if (!$enabled) {
    $modules['ckeditor'] = t('None of the enabled <a href="@formats">text formats</a> use CKEditor.', array(
      '@formats' => url('admin/config/content/formats'),
    ));
  }

  // Color: Check for any themes with Color support.
  $support = FALSE;
  foreach (list_themes() as $theme) {
    if ($theme->status && !empty($theme->info['settings']['color'])) {
      $support = TRUE;
      break;
    }
  }
  if (!$support) {
    $modules['color'] = t('None of the enabled <a href="@themes">themes</a> have Color support.', array(
      '@themes' => url('admin/appearance'),
    ));
  }

  // Comment: Check for any comments and comment-enabled nodes.
  $comments = entity_load_multiple('comment');
  $query = new EntityFieldQuery();
  $comment_nodes = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('comment', 2, '<')
    ->execute();
  if (empty($comments) && empty($comment_nodes)) {
    $modules['comment'] = t('There are no <a href="@comments">comments</a> and no comment-enabled <a href="@nodes">nodes</a>.', array(
      '@comments' => url('admin/content/comment'),
      '@nodes' => url('admin/content'),
    ));
  }

  // Configuration Manager: Check roles with permission to access configuration
  // pages.
  $modules['config'] = unused_check_permission('synchronize configuration');

  // Contextual Links: Check roles with permission to use contextual links.
  $modules['contextual'] = unused_check_permission('access contextual links');

  // Dashboard: Check roles with permission to access the dashboard.
  $modules['dashboard'] = unused_check_permission('access dashboard');

  // Date: Check for any date fields.
  $modules['date'] = unused_check_fields('date', array('date', 'datetime', 'datestamp'));

  // Database Logging: The only way DBLog can be unused is if no one has access
  // to view the logs. But since the permission for that is 'access site
  // reports' and that same permission is used to view this page, then there's
  // no point showing anything here.
  $modules['dblog'] = FALSE;

  // Email: Check for any email fields.
  $modules['email'] = unused_check_fields('email', array('email'));

  // Field UI: This has many pages with various permissions for accessing them,
  // so it's too complicated to check if it's being used or not.
  $modules['field_ui'] = FALSE;

  // Image: This module provides default image styles which cannot be deleted.
  // Since these could be used in any number of places, it's impossible to tell
  // if this module's in use or not.
  $modules['image'] = FALSE;

  // Project Installer: Check roles with permission to install projects.
  $modules['installer'] = unused_check_permission('use installer browser');

  // Link: Check for any link fields.
  $modules['link'] = unused_check_fields('link', array('link_field'));

  // List: Check for any list fields.
  $modules['list'] = unused_check_fields('list', array('list_float', 'list_integer', 'list_text'));

  // Menu: Check roles with permission to administer menus.
  $modules['menu'] = unused_check_permission('administer menu');

  // Number: Check for any number fields.
  $modules['number'] = unused_check_fields('number', array('number_decimal', 'number_float', 'number_integer'));

  // Options: Check for fields using options widgets.
  $field_types = array();
  $widgets = module_invoke_all('field_widget_info');
  backdrop_alter('field_widget_info', $widgets);
  foreach ($widgets as $name => $widget) {
    if (in_array($name, array('options_select', 'options_buttons', 'options_onoff'))) {
      foreach ($widget['field types'] as $type) {
        if (!in_array($type, $field_types)) {
          $field_types[] = $type;
        }
      }
    }
  }
  if (!empty(unused_check_fields('options', $field_types))) {
    $modules['options'] = t('There are no <a href="@fields_url">fields</a> using an options widget.', array(
      '@fields_url' => url('admin/reports/fields'),
    ));
  }

  // Path: Check for URL aliases in the database.
  $pid = db_query_range("SELECT pid FROM {url_alias}", 0, 1)->fetchField();
  if (empty($pid)) {
    $modules['path'] = t('There are no <a href="@aliases">URL aliases</a>.', array(
      '@aliases' => url('admin/config/urls/path'),
    ));
  }

  // Redirect: Check for redirects in the database.
  $rid = db_query_range("SELECT rid FROM {redirect}", 0, 1)->fetchField();
  if (empty($rid)) {
    $modules['redirect'] = t('There are no <a href="@redirects">URL redirects</a>.', array(
      '@redirects' => url('admin/config/urls/redirect'),
    ));
  }

  // Search: Check roles with permission to use search.
  $modules['search'] = unused_check_permission('search content');

  // Taxonomy: Check for vocabularies.
  $vocabularies = taxonomy_vocabulary_load_multiple(FALSE);
  if (empty($vocabularies)) {
    $modules['taxonomy'] = t('There are no <a href="@taxonomy">vocabularies</a>.', array(
      '@taxonomy' => url('admin/structure/taxonomy'),
    ));
  }

  // Telemetry: When enabled, Telemetry is always being used.
  $modules['telemetry'] = FALSE;

  // Update Manager: This uses generic permissions so it's impossible to tell
  // whether it's used or not.
  $modules['update'] = FALSE;

  // Views UI: This  doesn't have its own permissions, so there's nothing to
  // check here.
  $modules['views_ui'] = FALSE;

  return $modules;
}

/**
 * Check if fields of a certain type exist.
 *
 * @param string $field_name
 *   The name of the type of field we're checking for, for use in the return
 *   message (e.g. 'list', 'number', etc.).
 * @param array $field_types
 *   An array of field types to check.
 *
 * @return string|FALSE
 *   The translated message to display if no fields were found, or FALSE
 *   otherwise.
 */
function unused_check_fields($field_name, $field_types) {
  $fields = &backdrop_static(__FUNCTION__);
  $field_exists = FALSE;
  $reason = FALSE;

  // Cache the list of fields for performance.
  if (!isset($fields)) {
    $fields = field_info_fields();
  }

  // Check if there are any fields of the given type(s).
  foreach ($fields as $field) {
    if (in_array($field['type'], $field_types)) {
      $field_exists = TRUE;
      break;
    }
  }

  // Set a message saying there are no fields of that type.
  if (!$field_exists) {
    $reason = t('There are no @field_name <a href="@fields_url">fields</a>.', array(
      '@field_name' => $field_name,
      '@fields_url' => url('admin/reports/fields'),
    ));
  }

  return $reason;
}

/**
 * Check if a given permission is enabled for any role.
 *
 * @param string $permission
 *   The permission to check.
 *
 * @return string|FALSE
 *   The translated message to display if no roles have the given permission, or
 *   FALSE otherwise.
 */
function unused_check_permission($permission) {
  $permissions = &backdrop_static(__FUNCTION__);
  $reason = FALSE;

  // Cache the list of permissions for performance.
  if (!isset($permissions)) {
    $permissions = module_invoke_all('permission');
  }

  // Set a message saying there are no roles with that permission.
  if (empty(user_roles(FALSE, $permission))) {
    $reason = t('There are no roles with the "@permission_name" <a href="@permissions">permission</a>.', array(
      '@permission_name' => $permissions[$permission]['title'],
      '@permissions' => url('admin/config/people/permissions'),
    ));
  }

  return $reason;
}
